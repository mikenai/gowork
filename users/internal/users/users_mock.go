// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"context"
	"github.com/mikenai/gowork/internal/models"
	"sync"
)

// Ensure, that RepositryMock does implement Repositry.
// If this is not the case, regenerate this file with moq.
var _ Repositry = &RepositryMock{}

// RepositryMock is a mock implementation of Repositry.
//
//	func TestSomethingThatUsesRepositry(t *testing.T) {
//
//		// make and configure a mocked Repositry
//		mockedRepositry := &RepositryMock{
//			CreateFunc: func(ctx context.Context, name string) (models.User, error) {
//				panic("mock out the Create method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (models.User, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateFunc: func(ctx context.Context, params UserUpdateParams) (models.User, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepositry in code that requires Repositry
//		// and then make assertions.
//
//	}
type RepositryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, name string) (models.User, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (models.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, params UserUpdateParams) (models.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params UserUpdateParams
		}
	}
	lockCreate  sync.RWMutex
	lockGetByID sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositryMock) Create(ctx context.Context, name string) (models.User, error) {
	if mock.CreateFunc == nil {
		panic("RepositryMock.CreateFunc: method is nil but Repositry.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, name)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepositry.CreateCalls())
func (mock *RepositryMock) CreateCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositryMock) GetByID(ctx context.Context, id string) (models.User, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositryMock.GetByIDFunc: method is nil but Repositry.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepositry.GetByIDCalls())
func (mock *RepositryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositryMock) Update(ctx context.Context, params UserUpdateParams) (models.User, error) {
	if mock.UpdateFunc == nil {
		panic("RepositryMock.UpdateFunc: method is nil but Repositry.Update was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params UserUpdateParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, params)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepositry.UpdateCalls())
func (mock *RepositryMock) UpdateCalls() []struct {
	Ctx    context.Context
	Params UserUpdateParams
} {
	var calls []struct {
		Ctx    context.Context
		Params UserUpdateParams
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
